/// Layout boxes are the components that made up the layout tree.
/// Since layout boxes can be categorized into many types of box,
/// this module will be used to define those types of box.
pub mod block;
pub mod inline;

use std::rc::Rc;
use std::ops::Deref;
use block::{BlockContainerBox, AnonymousBlockBox};
use inline::{InlineBox, AtomicInlineLevelBox, AnonymousInlineBox};
use style::render_tree::RenderNodeRef;
use super::box_model::Dimensions;

/// LayoutBox for the layout tree.
/// A box in the layout tree can either be a block-level box
/// or an inline-level box.
#[derive(Debug)]
pub enum LayoutBox {
    /// **Block-level boxes**
    ///
    /// These boxes participate in a block formatting context
    /// and generated by block-level elements, which are elements
    /// with the `display` value of:
    /// - `block`
    /// - `list-item`
    /// - `table`
    /// See: https://www.w3.org/TR/CSS22/visuren.html#block-boxes
    BlockLevelBox(BlockLevelBox),

    /// **Inline-level boxes**
    ///
    /// These boxes participate in an inline formatting context
    /// and generated by inline-level elements, which are elements
    /// with the `display` value of:
    /// - `inline`
    /// - `inline-block`
    /// - `inline-table`
    /// See: https://www.w3.org/TR/CSS22/visuren.html#inline-boxes
    InlineLevelBox(InlineLevelBox),
}

/// Block-level box can be one of these types of box:
/// - Block container box
/// - Table box
/// - Anonymous block box
/// See: https://www.w3.org/TR/CSS22/visuren.html#block-boxes
#[derive(Debug)]
pub enum BlockLevelBox {
    /// By default, a block-level box is a block container box.
    /// Unless it is indicated as a table box.
    BlockContainerBox(BlockContainerBox),

    /// An anonymous block box is created to wrap inline-level
    /// boxes in a block formatting context. Meaning this type
    /// of box doesn't associate with any element.
    ///
    /// **Note:** Since it's called "block box", even though it's
    /// an anonymous box, it's still considered to be a block
    /// container box.
    ///
    /// See: https://www.w3.org/TR/CSS22/visuren.html#anonymous-block-level
    AnonymousBlockBox(AnonymousBlockBox)
}

/// Inline-level box can be one of these types of box:
/// - Inline box
/// - Atomic inline-level box
/// - Anonymous inline box
/// See: https://www.w3.org/TR/CSS22/visuren.html#inline-boxes
///
/// TODO: Support inline block container
#[derive(Debug)]
pub enum InlineLevelBox {
    /// Inline box is a box that establish an inline
    /// formatting context. A non-replaced element with
    /// a display value of `inline`, generates inline box.
    InlineBox(InlineBox),

    /// Inline-level boxes that are not inline box are
    /// called atomic inline level boxes.
    AtomicInlineLevelBox(AtomicInlineLevelBox),

    /// An anonymous inline box is generated for text nodes
    /// that don't associate with any inline-level element.
    /// For example:
    ///
    /// <p>Some <em>emphasized</em> text</p>
    ///
    /// `<em>` generate an inline box to wrap the 'emphasized' text.
    /// But the text nodes for 'Some' and 'text' is contained in
    /// an inline box that is generated by `<p>`, which is not an
    /// inline-level element. Thus we call those inline box, anonymous
    /// inline box.
    AnonymousInlineBox(AnonymousInlineBox)
}

/// The base of all boxes. This struct is used to
/// share properties that all boxes shared.
#[derive(Debug)]
pub struct BaseBox {
    /// The node associated render node to access the style
    /// and node information for categorizing & calculating
    /// dimensions.
    node: RenderNodeRef,

    /// The formatting context that the box is establish
    formatting_context: FormattingContextRef,

    /// The box-model for the box
    dimensions: Dimensions,

    /// The children boxes
    children: Vec<LayoutBox>
}

#[derive(Debug)]
pub enum FormattingContext {
    /// Block formatting context. Established by block-level boxes
    Block,

    /// Inline formatting context. Established by either block-level boxes
    /// or (anonymous)inline boxes.
    Inline
}

#[derive(Debug)]
pub struct FormattingContextRef(Rc<FormattingContext>);

impl Deref for FormattingContextRef {
    type Target = Rc<FormattingContext>;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl FormattingContextRef {
    pub fn new_block_context() -> Self {
        Self(Rc::new(FormattingContext::Block))
    }
}

impl BaseBox {
    pub fn new(
        node: RenderNodeRef,
        formatting_context: FormattingContextRef
    ) -> Self {
        Self {
            node,
            formatting_context,
            children: Vec::new(),
            dimensions: Default::default()
        }
    }
}

#[macro_export]
macro_rules! base_box_deref_impls {
    ($box:ident) => {
        impl Deref for $box {
            type Target = BaseBox;
            fn deref(&self) -> &Self::Target {
                &self.base
            }
        }
    };
}
